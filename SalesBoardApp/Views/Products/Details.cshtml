@model SalesBoardApp.Models.Product
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using SalesBoardApp.Areas.Identity.Data
@inject IAuthorizationService  AuthorizationService
@inject UserManager<SalesBoardAppUser> UserManager

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Details</h1>

<div class="card border-0" style="width: 30rem;">
    <img src="@Model.Image" class="card-img-top" alt="...">
    <div class="card-body">
        @if (Model.Available == 0)
        {
            <h5 class="cart-title">@Html.DisplayFor(model=> Model.Name) (SOLD OUT)</h5>
        }
        else
        {
            <h5 class="cart-title">@Html.DisplayFor(model => Model.Name)</h5>
        }
        <p class="card-text">$@Html.DisplayFor(model => model.Price)</p>
        <p class="card-text">@Html.DisplayFor(model => model.Description)</p>
        <p class="cart-text">@Html.DisplayFor(model => model.Available) Available</p>
        <p class="card-text mb-5"><small class="text-muted">Posted by @Model.SalesBoardAppUser.FirstName @Model.SalesBoardAppUser.LastName on @Html.DisplayFor(model => model.Posted)</small></p>
        @if (UserManager.GetUserId(User) != Model.UserId)
        {
            <a class="btn btn-primary" asp-controller="Cart" asp-action="buy" asp-route-id="@Model.ProductId">Add to cart</a>
        }
        @if ((await AuthorizationService.AuthorizeAsync(User, Model, "AccessPolicy")).Succeeded)
        {
            <a class="btn btn-primary" asp-action="Edit" asp-route-id="@Model.ProductId">Edit</a>
        }
        @if ((await AuthorizationService.AuthorizeAsync(User, Model, "AccessPolicy")).Succeeded)
        {
            <a class="btn btn-primary" asp-action="Delete" asp-route-id="@Model.ProductId">Delete</a>
        }
    </div>
</div>

<div>
    <a class="mr-2" asp-controller="Home" asp-action="Index">Home</a> |
    <a class="ml-2" asp-action="Index">All Products</a>
</div>
